import "std/std.scr";
import "std/str.scr";

-- for the arr2 example
proc f'(void): usize {
    return 3;
}

-- Passing arrays are taken as a reference.
-- When passing an array, you must put `..`.
proc contains(arr: usize[..], n: usize, find: usize): i32 {
    for let i: usize = 0; i < n; i += 1; {
        if arr[i] == find {
            return 1;
        }
    }
    return 0;
}

proc print_strs(strs: str[..], strs_len: usize): void {
    let should_be: str[..] = {
        "hello",
        "world",
        "!"
    };

    for let i: usize = 0; i < strs_len; i += 1; {
        i32assert(streq(strs[i], should_be[i]));
        printf("%s\n", strs[i]);
    }
}

export proc main(void): i32 {
    -- Arrays can be declared with
    -- their len in the type def.
    let arr1: usize[5] = {1, 2, 3, 4, 5};
    let n1: usize = 5;

    -- If a len is specified, you
    -- can initialize all elements
    -- to zero.
    let zeros: i32[5] = {0};

    -- You can even use strings
    let strs: str[..] = {
        "hello",
        "world",
        "!"
    };
    let strs_len: usize = 3;

    -- Or, the size can be infered from
    -- the lhs by using `..`.
    let letters: char[..] = {'a', 'b', 'c', 'd', 'e'};
    let letters': char[..] = {'a', 'b', 'c', 'd', 'e'};

    for let i: usize = 0; i < n1; i += 1; {
        -- Arrays must be indexed by
        -- either a constant number
        -- or `usize`. If needed, you
        -- can always cast to a usize.
        i32assert(arr1[i] == i+1);

        -- Example of casting
        let i': i32 = i32 i;
        i32assert(zeros[usize i'] == 0);

        i32assert(letters[arr1[i]-1] == letters'[i]);
    }

    -- You can have expressions in array initialization.
    let arr2: i32[..] = {2, 4, i32 f'(), 5, 1};
    let n2: usize = 5;

    printf("arr2 before qsort:\n");
    arr_i32_print(arr2, n2, 1); -- from std

    arr_i32_qsort(arr2, 0, n2-1); -- from std

    printf("arr2 after qsort:\n");
    arr_i32_print(arr2, n2, 1);

    print_strs(strs, strs_len);

    return 0;
}
