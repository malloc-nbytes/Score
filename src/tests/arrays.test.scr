proc sum_arr(void): i32 {
    printf("sum_arr\n");
    let arr: i32[5] = {1,2,3,4,5};
    let s: i32 = 0;
    for let i: usize = 0; i < 5; i += 1; {
        s += arr[i];
    }
    return s;
}

proc find_biggest(void): i32 {
    printf("find_biggest\n");
    let arr: i32[5] = {3,1,5,2,4};
    let m: i32 = arr[0];
    for let i: usize = 0; i < 5; i += 1; {
        if arr[i] > m { m = arr[i]; }
    }
    return m;
}

proc small_arr(void): i32 {
    printf("small_arr\n");
    let arr: i32[2] = {1,2};
    return arr[0] + arr[1];
}

proc index_wanother_arr(void): i32 {
    printf("index_wanother_arr\n");
    let arr: i32[5] = {1,2,3,4,5};
    let index_arr: i32[2] = {0,4};
    return arr[index_arr[0]] + arr[index_arr[1]];
}

proc index_arr_backwards(void): i32 {
    printf("index_arr_backwards\n");
    let arr: i32[3] = {1,2,3};
    let s: i32 = 0;
    for let i: usize = 2; i >= 0; i -= 1; {
        s += arr[i];
    }
    return s;
}

proc find_maj_elem(void): usize {
    printf("find_maj_elem\n");
    let arr: i32[5] = {1,1,5,1,5};
    let freqs: i32[6] = {0,0,0,0,0,0};

    for let i: usize = 0; i < 5; i += 1; {
        freqs[arr[i]] += 1;
    }

    let m: usize = 0;
    for let i: usize = 0; i < 6; i += 1; {
        if freqs[i] > freqs[m] {
            m = i;
        }
    }

    return m;
}

proc test_zero_init(void): i32 {
    printf("test_zero_init\n");

    let arr: i32[5] = {0};
    let m: i32 = 0;
    for let i: i32 = 0; i < 5; i += 1; {
        if arr[i] != 0 { m = 1; }
    }
    return m;
}

proc main(i: i32): i32 {
    if sum_arr() != 15 {
        printf("sum arr failed\n");
        exit(1);
    }

    if find_biggest() != 5 {
        printf("find_biggest failed\n");
        exit(1);
    }

    if small_arr() != 3 {
        printf("small_arr failed\n");
        exit(1);
    }

    if index_wanother_arr() != 6 {
        printf("index_wanother_arr failed\n");
        exit(1);
    }

    if index_arr_backwards() != 6 {
        printf("index_arr_backwards() failed\n");
        exit(1);
    }

    if find_maj_elem() != 1 {
        printf("find_maj_elem failed\n");
        exit(1);
    }

    if test_zero_init() != 0 {
        printf("test_zero_init failed\n");
        exit(1);
    }

    return 0;
}
