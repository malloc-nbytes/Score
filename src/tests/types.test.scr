type T1 = (x: i32, y: i32) in
type T2 = (x: usize, y: i32) in
type T3 = (x: usize, y: usize) in
type T4 = (x: i32, s: str) in
type T5 = (s1: str, s2: str, c: char) in

proc t1_create(void): i32 {
    let t: T1 = {1,2};
    return t.x == 1 && t.y == 2;
}

proc t1_wparams(x: i32, y: i32): i32 {
    let t: T1 = {x,y};
    return t.x == x && t.y == y;
}

proc t1_init_wo_arr_init(x: i32, y: i32): i32 {
    let t: T1 = {};
    t.x = x;
    t.y = y;
    return t.x == x && t.y == y;
}

proc t1_ret(x: i32, y: i32): T1 {
    let t: T1 = {x,y};
    return t;
}

proc t1_take_copy(t: T1, origx: i32, origy: i32): i32 {
    t.x = t.x+1;
    t.y += t.y;
    return t.x == origx+1 && t.y == origy*2;
}

proc t1_take_ref(t: T1 ref): void {
    t.x *= 2;
    t.y *= 2;
}

export proc test_types(void): i32 {
    printf("test_types... ");

    if t1_create() != 1 {
        printf("t1_create failed\n");
        return 1;
    }

    if t1_wparams() != 1 {
        printf("t1_wparams failed\n");
        return 1;
    }

    if t1_init_wo_arr_init() != 1 {
        printf("t1_init_wo_arr_init failed\n");
        return 1;
    }

    let __t1_ret: T1 = t1_ret(1,2);
    if __t1_ret.x != 1 || __t1_ret.y != 2 {
        printf("t1_ret failed\n");
        return 1;
    }

    let __t1_take_copy: T1 = {1,2};
    if t1_take_copy(__t1_take_copy, 1, 2) != 1 || __t1_take_copy.x != 1 || __t1_take_copy.y != 2 {
        printf("t1_take_copy failed\n");
        return 1;
    }

    let __t1_take_ref_x: i32 = 1;
    let __t1_take_ref_y: i32 = 2;
    let __t1_take_ref: T1 = {__t1_take_ref_x,__t1_take_ref_y};
    t1_take_ref(&__t1_take_ref);
    if __t1_take_ref.x != __t1_take_ref_x*2 || __t1_take_ref.y != __t1_take_ref_y*2 {
        printf("t1_take_ref failed\n");
        return 1;
    }

    printf("ok\n");
    return 0;
}
