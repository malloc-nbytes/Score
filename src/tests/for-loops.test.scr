proc basic_for(void): i32 {
    printf("basic_for\n");

    let res: i32 = 0;
    for let i: i32 = 0; i < 10; i += 1; {
        res += 1;
    }
    return res;
}

proc double_for(void): i32 {
    printf("double_for\n");

    let res: i32 = 0;
    for let i: i32 = 0; i < 10; i += 1; {
        for let j: i32 = 0; j < 10; j += 1; {
            res += 1;
        }
    }
    return res;
}

proc return_in_for(void): i32 {
    printf("return_in_for\n");

    let res: i32 = 0;
    for let i: i32 = 0; i < 10; i += 1; {
        if res == 5 {
            return res;
        }
        res += 1;
    }

    return res;
}

proc return_in_double_for(void): i32 {
    printf("return_in_double_for\n");

    let res: i32 = 0;
    for let i: i32 = 0; i < 10; i += 1; {
        for let j: i32 = 0; j < 10; j += 1; {
            if res == 50 {
                return res;
            }
            res += 1;
        }
    }

    return res;
}

proc for_wparam(stop: i32): i32 {
    printf("for_wparam\n");

    let res: i32 = 0;
    let i: i32 = 0;

    for i = 0; i < stop; i += 1; {
        res += 1;
    }
    return res == stop;
}

proc main(void): i32 {
    if basic_for() != 10 {
        printf("basic_for failed\n");
        exit(1);
    }

    if double_for() != 100 {
        printf("double_for failed\n");
        exit(1);
    }

    if return_in_for() != 5 {
        printf("return_in_for failed\n");
        exit(1);
    }

    if return_in_double_for() != 50 {
        printf("return_in_double_for failed\n");
        exit(1);
    }

    if for_wparam(10) != 1 {
        printf("for_wparam failed\n");
        exit(1);
    }

    return 0;
}
