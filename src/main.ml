(* MIT License

   * Copyright (c) 2023 malloc-nbytes

   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:

   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.

   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE. *)

open Utils
open Token
open Lexer
open Parser
open Ast
open Ir

let run_qbe inter_code_fp output_fp should_del (other_files : string list) =
  let cmd = Printf.sprintf "qbe -o %s %s %s"
              output_fp inter_code_fp (String.concat " " other_files) in
  let _ = Sys.command cmd in (* TODO: deal with exit failure *)
  if should_del then
    try Sys.remove inter_code_fp;
    with | Sys_error(msg) -> Printf.printf "Error: %s\n" msg
  else ()

let assemble outfp asmfp debug_syms should_del =
  let cmd = Printf.sprintf "cc %s -o %s %s"
              (if debug_syms then "-g" else "")
              outfp asmfp in
  let _ = Sys.command cmd in
  if should_del then
    try Sys.remove asmfp;
    with | Sys_error(msg) -> Printf.printf "Error: %s\n" msg
  else ()

let usage (progname : string) : unit =
  let open Printf in
  printf "Usage: %s [opts] <filepath>\n" progname;
  printf "where\n";
  printf "  -h               :: view this message\n";
  printf "  --help           :: view this message\n";
  printf "  -o <fp>          :: specify the output filepath\n";
  printf "  -output <fp>     :: specify the output filepath\n";
  printf "  -s               :: save temporary files generated by Score\n";
  printf "  --save-temps     :: save temporary files generated by Score\n";
  printf "  -g               :: enable debug symbols\n";
  printf "  --gen-debug-info :: enable debug symbols\n";
  exit 1

let ssas = ref []

let rec compile (infp : string) (outfp : string) (debug_syms : bool) (should_del : bool) =
  Printf.printf "Compiling: %s\n" infp;
  let intermediate_code_fp = outfp ^ ".ssa" in
  let asm_fp = outfp ^ ".s" in

  let data = Utils.file_to_str infp in
  let tokens = Lexer.lex_file infp (String.to_seq data |> List.of_seq) 1 1 in
  let program = Parser.produce_ast tokens in
  let code, import_scr_fps = Ir.generate_inter_lang program in
  Printf.printf "number of import_scr_fps: %d\n" (List.length import_scr_fps);

  (* for each import_scr, compile it *)
  for i = 0 to List.length import_scr_fps - 1 do
    let scr_fp = List.nth import_scr_fps i in
    let inter_code_fp, asm_fp = compile scr_fp (Filename.chop_extension scr_fp) debug_syms should_del in
    ssas := inter_code_fp :: !ssas;
  done;

  (* Run QBE on the intermediate code *)
  let _ = Utils.write_to_file intermediate_code_fp code in
  intermediate_code_fp, asm_fp

let () =
  let argv = Array.to_list Sys.argv in
  let progname = List.hd argv in
  let argv = List.tl argv in

  let infp = ref "" in
  let outfp = ref "out" in
  let debug_syms = ref false in
  let should_del = ref true in

  (* flags: -o --output, -s --save-temps *)
  let rec parse_args = function
    | [] -> ()
    | "-h" :: _ | "--help" :: _ -> usage progname
    | "-o" :: fp :: rest -> outfp := fp; parse_args rest
    | "--output" :: fp :: rest -> outfp := fp; parse_args rest
    | "-s" :: rest | "--save-temps" :: rest -> should_del := false; parse_args rest
    | "-g" :: rest | "--gen-debug-info" :: rest -> debug_syms := true; parse_args rest
    | fp :: _ -> infp := fp in

  parse_args argv;

  if !infp = "" then
    usage progname
  else
    Lexer.populate_keywords ();
    let intermediate_code_fp, asm_fp = compile !infp !outfp !debug_syms !should_del in
    let _ = run_qbe intermediate_code_fp asm_fp !should_del !ssas in
    assemble !outfp asm_fp !debug_syms !should_del
