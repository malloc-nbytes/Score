-- This is an example file of what this compiler
-- is currently able to compile. Comments start
-- with `--` and read until EOL.

-- Find the factorial of a number.
proc factorial(n: i32): i32 {
    let res: i32 = 1;

    -- Syntax for a `for let` loop.
    for let i: i32 = 2; i <= n; i += 1; { -- `;` is required for the stmt `i += 1;`.
        res *= i;
    }

    return res;
}

-- The classic "FizzBuzz" problem.
proc fizzbuzz(void): void {
    let i: i32 = 1;

    -- `while` loop syntax and if-else-if.
    while i < 101 {
        if i % 5 == 0 && i % 3 == 0 {
            printf("FizzBuzz\n");
        }
        else if i % 5 == 0 {
            printf("Fizz\n");
        }
        else if i % 3 == 0 {
            printf("Buzz\n");
        }
        else {
            printf("%d\n", i);
        }
        i += 1;
    }
}

-- Calculate the fibonacci sequence of
-- a given number.
proc fibonacci(n: i32): i32 {
    if n == 0 { return 0; }
    if n == 1 { return 1; }

    -- You can use recursion.
    return fibonacci(n-1) + fibonacci(n-2);
}

-- Print the range of numbers from start..end.
proc print_range(start: i32, end: i32): void {
    while start < end {
        printf("%d ", start);
        start += 1;
    }
}

-- Given a first and last name, print the names.
proc print_name(fname: str, lname: str): void {
    printf("Your name is: %s %s\n", fname, lname);
}

-- Nested statements
proc print_matrix(void): void {
    for let row: i32 = 1; row <= 10; row += 1; {
        for let col: i32 = 1; col <= 10; col += 1; {
            printf("%d ", row*col);
        }
        printf("\n");
    }
}

-- Arrays and casting example.
proc find_majority_elem(arr: i32[..], n: usize): i32 {
    let freqs: i32[10] = {0};

    for let i: usize = 0; i < n; i += 1; {
        freqs[usize arr[i]] += 1;
    }

    let m: i32 = 0;
    for let i: usize = 0; i < 10; i += 1; {
        if freqs[i] > freqs[usize m] {
            m = i32 i;
        }
    }

    return m;
}

-- `main` MUST start with `export`.
export proc main(void): i32 {
    let n: i32 = 10;

    -- Call to C function printf().
    printf("fib of %d is %d\n", n, fibonacci(n));

    fizzbuzz();

    print_range(0, 10);
    printf("\n");

    print_name("John", "Doe");

    printf("Factorial of 5: %d\n", factorial(5));

    -- Intitialze arrays with len = `..` and
    -- will be infered from the len of the rhs
    -- or just put the size explicitly.
    let arr: i32[..] = {1,1,1,5,5,1,5,5};
    let arr_len: usize = 8;
    printf("The majority element is: %d\n", find_majority_elem(arr, arr_len));

    return 0;
}

